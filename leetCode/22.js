/**
 * @param {number} n
 * @return {string[]}
 */


function generateParenthesis(n) {
    const result = [];
  
    function backtrack(current, left, right) {
      if (left === 0 && right === 0) {
        result.push(current);
        return;
      }
  
      if (left > 0) {
        backtrack(current + '(', left - 1, right);
      }
  
      if (right > left) {
        backtrack(current + ')', left, right - 1);
      }
    }
  
    backtrack('', n, n);
    return result;
  }
  
  // Пример использования
  const n = 3;
  const combinations = generateParenthesis(n);
  console.log(combinations);
  

generateParenthesis(3);

//4 14 Output: ["(((())))","((()()))","((())())","(()(()))","(()()())",()((())),((()))(),(())()(),()()(()),()()()()]10
//3 5 Output: ["((()))","(()())","(())()","()(())","()()()"]
//2 2 Output: ["(())","()()"]2
//1 1 Output: ["()"] 1

// 4
// 3+1
// 1+3 *9
// 2+2

//                     14
// 1+1+2
// 1+2+1 *3
// 2+1+1

// 1+1+1+1

// 5 1

// 4+1  5-1 4
// 3+2
// 2+3
// 1+4

// 1+1+
// 1+2+2

// 6
// 5+1
// 4+2
// 3+3
// 2+4
// 1+5

//Output: ["))))","((()()))","((())())","(()(()))","(()()())",()((())),((()))(),(())()(),()()(()),()()()()]10
